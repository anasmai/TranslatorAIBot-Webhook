from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
import requests
import asyncio
import logging
from datetime import date
from database import get_limit_data, set_limit_data

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –í–ï–ë–•–£–ö–û–í
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# END –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´

load_dotenv()

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –í–ï–ë–•–£–ö–û–í ---
# Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8080))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ 8080
WEBHOOK_PATH = "/webhook"  # –≠—Ç–æ –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –±–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL.
# –ù–∞ Render —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è SERVICE_URL –∏–ª–∏ PUBLIC_URL.
# –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WEBHOOK_URL –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –∫–∞–∫ –º—ã –µ–µ –Ω–∞–∑–æ–≤–µ–º –≤ Render.
WEBHOOK_URL_BASE = os.getenv("WEBHOOK_URL")
WEBHOOK_URL = f"{WEBHOOK_URL_BASE}{WEBHOOK_PATH}"  # –ü–æ–ª–Ω—ã–π URL –¥–ª—è Telegram

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# –í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET",
                           "jKa1sBwF4pXzV7tR3qY9eC8nM2lD0hG4uI6oA")  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –°–ï–ö–†–ï–¢–ù–´–ô –¢–û–ö–ï–ù

# –í–∞—à–∏ API-–∫–ª—é—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ TELEGRAM_BOT_TOKEN –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞)
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

DAILY_LIMIT = 1500
LANGUAGES = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'pt': 'Portugu√™s',
    'fr': 'Fran√ßais',
    'en': 'English'
}

# Logging setup for debugging
logging.basicConfig(level=logging.INFO)

# Using a dictionary to store message data in order to preserve state
message_data_store = {}


def check_and_reset_limit():
    today = date.today().isoformat()
    saved_date, count = get_limit_data()
    if saved_date != today:
        set_limit_data(today, 0)
        return 0
    return count


def increment_limit():
    today = date.today().isoformat()
    saved_date, count = get_limit_data()
    count += 1
    set_limit_data(today, count)
    return count


async def translate_text_gemini(text: str, target_lang: str) -> str:
    url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent'

    headers = {
        'Content-Type': 'application/json'
    }
    params = {
        'key': GEMINI_API_KEY
    }

    # Prompt for translation
    prompt = f'Translate this text to {LANGUAGES[target_lang]} exactly, return ONLY the translated text, no additional words or explanations:\n\n"{text}"'

    # Request structure for Gemini 1.5 Flash
    json_data = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.0,  # translation accuracy
            "maxOutputTokens": 512  # Maximum number of tokens in the response
        }
    }

    try:
        response = requests.post(url, headers=headers, params=params, json=json_data)
        response.raise_for_status()  # Raises an exception for HTTP errors (4xx or 5xx)

        resp_json = response.json()

        # Response parsing for Gemini 1.5 Flash
        if 'candidates' in resp_json and resp_json['candidates']:
            for candidate in resp_json['candidates']:
                if 'content' in candidate and 'parts' in candidate['content'] and candidate['content']['parts']:
                    return candidate['content']['parts'][0]['text'].strip()
            logging.warning(f"Gemini API returned no usable content in candidates: {resp_json}")
            return '[Error: No translation candidates found in Gemini response]'
        else:
            logging.warning(f"Gemini API returned no candidates for translation: {resp_json}")
            return '[Error: No translation candidates from Gemini API]'
    except requests.exceptions.RequestException as e:
        logging.error(f"Error calling Gemini API: {e}")
        if hasattr(e, 'response') and e.response is not None:
            logging.error(f"Gemini API full error response: {e.response.text}")
        return f'[Error in translation API: {e}]'
    except Exception as e:
        logging.error(f"Unexpected exception during Gemini translation: {e}")
        return f'[Exception: {e}]'


@dp.message()
async def handle_message(message: types.Message):
    count = check_and_reset_limit()
    if count >= DAILY_LIMIT:
        await message.reply("Daily translation limit reached. The bot is ‚Äòsleeping‚Äô until tomorrow.")
        return

    original_text = message.text
    if not original_text:
        return

    increment_limit()

    buttons = []
    for code, name in LANGUAGES.items():
        flag = {'ru': 'üá∑üá∫', 'pt': 'üáßüá∑', 'fr': 'üá´üá∑', 'en': 'üá¨üáß'}.get(code, '')
        buttons.append(InlineKeyboardButton(text=f'{flag} {name}', callback_data=f'translate_{code}'))

    keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    sent = await message.answer(
        'üí¨ Translation available:\nSelect a language:',
        reply_markup=keyboard
    )
    message_data_store[(sent.chat.id, sent.message_id)] = {
        'original_text': original_text
    }


@dp.callback_query(lambda c: c.data and c.data.startswith('translate_'))
async def process_translate(callback: types.CallbackQuery):
    target_lang = callback.data.split('_')[1]
    key = (callback.message.chat.id, callback.message.message_id)

    data = message_data_store.get(key)
    if not data:
        await callback.answer("Original message not found or has expired.", show_alert=True)
        return

    original_text = data['original_text']

    await callback.answer("Translating‚Ä¶", show_alert=False)

    translation = await translate_text_gemini(original_text, target_lang)

    text = f'{LANGUAGES[target_lang]} Translation: {translation}\n\nüîÅ Show in another language:'

    buttons = []
    for code, name in LANGUAGES.items():
        if code != target_lang:
            flag = {'ru': 'üá∑üá∫', 'pt': 'üáßüá∑', 'fr': 'üá´üá∑', 'en': 'üá¨üáß'}.get(code, '')
            buttons.append(InlineKeyboardButton(text=f'{flag} {name}', callback_data=f'translate_{code}'))

    keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –î–õ–Ø –í–ï–ë–•–£–ö–û–í ---
async def on_startup(dispatcher: Dispatcher, bot: Bot) -> None:
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await bot.delete_webhook(drop_pending_updates=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.set_webhook(
        WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True  # –¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    )
    logging.info(f"Webhook set to: {WEBHOOK_URL}")


async def on_shutdown(dispatcher: Dispatcher, bot: Bot) -> None:
    # –£–î–ê–õ–Ø–¢–¨ –í–ï–ë–•–£–ö –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò –†–ê–ë–û–¢–´ –ù–ï –ù–£–ñ–ù–û –ù–ê RENDER –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –¢–ò–ü–ê
    # –¢–∞–∫ –∫–∞–∫ Render —Å–∞–º "—É–±–∏–≤–∞–µ—Ç" –ø—Ä–æ—Ü–µ—Å—Å, –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –º–µ—à–∞–µ—Ç –∞–≤—Ç–æ-–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—é.
    # –ü–æ—ç—Ç–æ–º—É –º—ã –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–ª–∏ —É–¥–∞–ª–∏–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
    # await bot.delete_webhook() # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    logging.info(
        "Webhook deleted. (This message might still appear if the bot exits forcefully, but the webhook is not explicitly deleted by our code)")


# END –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ì–õ–ê–í–ù–´–ô –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê ---
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ on_startup –∏ on_shutdown –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.startup.register(on_startup)
    # dp.shutdown.register(on_shutdown) # <-- –≠–¢–£ –°–¢–†–û–ö–£ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –ò–õ–ò –£–î–ê–õ–Ø–ï–ú!

    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ aiogram
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=WEBHOOK_SECRET,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –∫ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    setup_application(app, dp, bot=bot)

    logging.info(f"Starting web server on {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")


    # --- –≠–¢–û–¢ –ù–û–í–´–ô –ë–õ–û–ö –ö–û–î–ê –ó–ê–ü–£–°–ö–ê –ó–ê–ú–ï–ù–Ø–ï–¢ web.run_app(...) ---
    async def main_run():
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ aiohttp –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è asyncio.run –¥–ª—è —è–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
        –∏ asyncio.sleep –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∞–º–æ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞,
        –ø–æ–∫–∞ Render –Ω–µ "—É—Å—ã–ø–∏—Ç" –µ–≥–æ –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.
        """
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
        await site.start()

        # –≠—Ç–æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
        # Render –±—É–¥–µ—Ç "—É–±–∏–≤–∞—Ç—å" –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç 15 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        # 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å) - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Å–∞–º.
        while True:
            await asyncio.sleep(3600)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main_run


    asyncio.run(main_run())